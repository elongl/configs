#!/usr/bin/env bash
# gor â€” Git Open Remote
# Usage:
#   gor [remote-name]
# Example:
#   gor          # opens the single remote
#   gor origin   # opens 'origin'

set -e

# Check if we're in a Git repo
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo "Error: Not a git repository." >&2
  exit 1
fi

# List remotes
remotes=($(git remote))
remote_count=${#remotes[@]}

# Determine which remote to use
if [[ $remote_count -eq 0 ]]; then
  echo "Error: No git remotes found." >&2
  exit 1
elif [[ $remote_count -gt 1 && -z $1 ]]; then
  echo "Error: Multiple remotes found: ${remotes[*]}" >&2
  echo "Usage: gor <remote-name>" >&2
  exit 1
fi

remote=${1:-${remotes[0]}}

# Get remote URL
url=$(git remote get-url "$remote" 2>/dev/null || true)
if [[ -z "$url" ]]; then
  echo "Error: Remote '$remote' not found." >&2
  exit 1
fi

# Normalize URL (handle SSH or HTTPS)
if [[ "$url" =~ ^git@([^:]+):(.+)\.git$ ]]; then
  host="${BASH_REMATCH[1]}"
  repo="${BASH_REMATCH[2]}"
  url="https://$host/$repo"
elif [[ "$url" =~ ^git@([^:]+):(.+)$ ]]; then
  host="${BASH_REMATCH[1]}"
  repo="${BASH_REMATCH[2]}"
  url="https://$host/$repo"
elif [[ "$url" =~ ^https:// ]]; then
  url="${url%.git}"
else
  echo "Error: Unrecognized remote URL format: $url" >&2
  exit 1
fi

# Open in browser
if command -v xdg-open >/dev/null 2>&1; then
  xdg-open "$url" >/dev/null 2>&1
elif command -v open >/dev/null 2>&1; then
  open "$url" >/dev/null 2>&1
else
  echo "Error: No suitable open command found." >&2
  echo "URL: $url"
  exit 1
fi

